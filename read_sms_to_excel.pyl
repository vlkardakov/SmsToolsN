import serial
import time
from datetime import datetime
import pandas as pd
from openpyxl import load_workbook, Workbook
from com_port_checker import find_available_ports, send_at_command, modem_port


# Функция для отправки AT команды и получения ответа
def send_at_command(port, command):
    modem = serial.Serial(port, 9600, timeout=5)
    modem.write((command + '\r\n').encode())
    time.sleep(1)
    response = modem.read_all().decode()
    modem.close()
    return response


# Функция для чтения SMS и записи в файл
def read_sms_and_save(port, contacts_file, output_file):
    # Открываем COM порт
    modem = serial.Serial(port, 9600, timeout=5)
    time.sleep(1)

    # Отправляем команду на чтение SMS
    modem.write(b'AT+CMGF=1\r\n')  # Устанавливаем текстовый режим SMS
    time.sleep(1)
    modem.write(b'AT+CMGL="ALL"\r\n')  # Читаем все SMS
    time.sleep(1)

    # Читаем ответы
    response = modem.read_all().decode()
    modem.close()

    # Обработка ответа и запись в Excel
    sms_messages = parse_sms_response(response)

    # Вывод содержимого SMS
    if sms_messages:
        print()
        print("Найдены SMS сообщения:", end = '')
        for sms in sms_messages:
            print(']')
            print(f"Отправитель: {sms['sender_number']}, Дата: {sms['date']}, Время: {sms['time']}, Сообщение: {sms['message']}")
    else:
        cy = 1
        print("#", end = '')
        if cy == 15:
            cy = 1

    contacts = load_contacts(contacts_file)
    append_to_excel(sms_messages, contacts, output_file)

    # Удаление всех SMS после записи
    delete_all_sms(port)

    # Обновление имен контактов в sms_log.xlsx
    update_contact_names(output_file, contacts)


# Функция для преобразования даты из формата YY/MM/DD в формат DD/MM/YYYY
def format_date(date_str):
    try:
        # Предполагается, что дата в формате YY/MM/DD
        date_obj = datetime.strptime(date_str, '%y/%m/%d')
        return date_obj.strftime('%d/%m/%Y')
    except ValueError:
        return date_str  # В случае ошибки возвращаем оригинальную строку


# Функция для парсинга ответа AT+CMGL и извлечения SMS сообщений
# Функция для парсинга ответа AT+CMGL и извлечения SMS сообщений
# Функция для парсинга ответа AT+CMGL и извлечения SMS сообщений
def parse_sms_response(response):
    messages = []
    lines = response.splitlines()
    i = 0
    while i < len(lines):
        if "+CMGL: " in lines[i]:
            parts = lines[i].split(",")
            index = parts[0].split(": ")[1].strip()
            sender_number = parts[2].strip('"')
            date_time = parts[4].strip('"')
            message = lines[i + 1].strip()

            # Декодируем текст сообщения из UCS-2 в UTF-8
            try:
                message = message.encode('latin1').decode('utf-16be')
            except UnicodeDecodeError:
                print("Ошибка декодирования текста сообщения")
                message = "Не удалось декодировать"

            # Проверка на наличие запятой и разделение строки
            if ',' in date_time:
                date, time = date_time.split(",")
            else:
                date = date_time
                time = "00:00:00"  # Время по умолчанию

            # Преобразуем дату в формат DD/MM/YYYY
            formatted_date = format_date(date.strip())

            # Заменяем время в SMS на текущее время
            current_time = datetime.now().strftime('%H:%M:%S')

            messages.append({
                "index": index,
                "sender_number": sender_number,
                "date": formatted_date,
                "time": current_time,  # Заменяем время на текущее время
                "message": message
            })
            i += 2  # Пропускаем следующие две строки
        else:
            i += 1
    return messages



# Функция для загрузки контактов из файла Excel
def load_contacts(filename):
    try:
        df = pd.read_excel(filename)
    except Exception as e:
        print(f"Ошибка при чтении файла контактов: {e}")
        return {}

    required_columns = ['Номер телефона', 'Имя маячка']
    for column in required_columns:
        if column not in df.columns:
            print(f"Отсутствует ожидаемый столбец: '{column}'")
            return {}

    contacts = {}
    for index, row in df.iterrows():
        # Приведение номеров телефонов к строковому формату без лишних символов
        phone_number = str(row['Номер телефона']).replace(' ', '').replace('-', '').replace('+', '')
        contacts[phone_number] = row['Имя маячка']
    return contacts


# Функция для добавления SMS в существующий Excel файл
# Функция для добавления SMS в существующий Excel файл
def append_to_excel(sms_messages, contacts, output_file):
    try:
        wb = load_workbook(output_file)
        ws = wb.active
    except FileNotFoundError:
        wb = Workbook()
        ws = wb.active
        ws.append(["Номер отправителя", "Имя контакта", "Сообщение", "Дата получения", "Текущая дата", "Текущее время"])

    for sms in sms_messages:
        sender_number = sms["sender_number"].replace(' ', '').replace('-', '')  # Убираем только пробелы и дефисы, сохраняем +
        contact_name = contacts.get(sender_number.replace('+', ''), "Неизвестный")  # Для поиска в контактах убираем +
        message = sms["message"] if sms["message"] else "Без текста"
        date_received = sms["date"]
        current_date = datetime.now().strftime('%d/%m/%Y')
        current_time = datetime.now().strftime('%H:%M:%S')

        ws.append([sender_number, contact_name, message, date_received, current_date, current_time])

    wb.save(output_file)



# Функция для обновления имен контактов в sms_log.xlsx
def update_contact_names(output_file, contacts):
    try:
        wb = load_workbook(output_file)
        ws = wb.active
    except FileNotFoundError:
        print(f"Файл {output_file} не найден.")
        return

    for row in ws.iter_rows(min_row=2, values_only=False):
        sender_number = str(row[0].value).replace(' ', '').replace('-', '').replace('+', '')
        recorded_name = row[1].value
        correct_name = contacts.get(sender_number, "Неизвестный")

        if recorded_name != correct_name:
            row[1].value = correct_name

    wb.save(output_file)


# Функция для удаления всех SMS на SIM-карте
def delete_all_sms(port):
    modem = serial.Serial(port, 9600, timeout=5)
    time.sleep(1)
    modem.write(b'AT+CMGD=1,4\r\n')  # Удаляем все сообщения
    time.sleep(1)
    modem.close()


# Основной код
import signal
import sys

# Основной код
def read_sms_to_excel():
    contacts_file = "Files/contacts.xlsx"  # Путь к файлу с контактами
    output_file = "Files/sms_log.xlsx"
    print('Поиск смс (зависание означает отсутствие новых смс)...')

    def signal_handler(sig, frame):
        print("\nПрограмма остановлена пользователем.")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)

    for i in range (30):
        read_sms_and_save(modem_port, contacts_file, output_file)
        time.sleep(1)
    print('Замедление частоты проверки...')
    while True:
        read_sms_and_save(modem_port, contacts_file, output_file)
        time.sleep(60)